# 1 "/Users/happy/Documents/Dataset/redis/src/cluster.h"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 366 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "/Users/happy/Documents/Dataset/redis/src/cluster.h" 2
# 34 "/Users/happy/Documents/Dataset/redis/src/cluster.h"
struct clusterNode;


typedef struct clusterLink {
    mstime_t ctime;
    connection *conn;
    sds sndbuf;
    char *rcvbuf;
    size_t rcvbuf_len;
    size_t rcvbuf_alloc;
    struct clusterNode *node;
} clusterLink;
# 110 "/Users/happy/Documents/Dataset/redis/src/cluster.h"
typedef struct clusterNodeFailReport {
    struct clusterNode *node;
    mstime_t time;
} clusterNodeFailReport;

typedef struct clusterNode {
    mstime_t ctime;
    char name[40];
    int flags;
    uint64_t configEpoch;
    unsigned char slots[16384/8];
    int numslots;
    int numslaves;
    struct clusterNode **slaves;
    struct clusterNode *slaveof;



    mstime_t ping_sent;
    mstime_t pong_received;
    mstime_t data_received;
    mstime_t fail_time;
    mstime_t voted_time;
    mstime_t repl_offset_time;
    mstime_t orphaned_time;
    long long repl_offset;
    char ip[NET_IP_STR_LEN];
    int port;
    int cport;
    clusterLink *link;
    list *fail_reports;
} clusterNode;

typedef struct clusterState {
    clusterNode *myself;
    uint64_t currentEpoch;
    int state;
    int size;
    dict *nodes;
    dict *nodes_black_list;
    clusterNode *migrating_slots_to[16384];
    clusterNode *importing_slots_from[16384];
    clusterNode *slots[16384];
    uint64_t slots_keys_count[16384];
    rax *slots_to_keys;

    mstime_t failover_auth_time;
    int failover_auth_count;
    int failover_auth_sent;
    int failover_auth_rank;
    uint64_t failover_auth_epoch;
    int cant_failover_reason;


    mstime_t mf_end;


    clusterNode *mf_slave;

    long long mf_master_offset;

    int mf_can_start;


    uint64_t lastVoteEpoch;
    int todo_before_sleep;

    long long stats_bus_messages_sent[10];
    long long stats_bus_messages_received[10];
    long long stats_pfail_nodes;

} clusterState;






typedef struct {
    char nodename[40];
    uint32_t ping_sent;
    uint32_t pong_received;
    char ip[NET_IP_STR_LEN];
    uint16_t port;
    uint16_t cport;
    uint16_t flags;
    uint32_t notused1;
} clusterMsgDataGossip;

typedef struct {
    char nodename[40];
} clusterMsgDataFail;

typedef struct {
    uint32_t channel_len;
    uint32_t message_len;
    unsigned char bulk_data[8];
} clusterMsgDataPublish;

typedef struct {
    uint64_t configEpoch;
    char nodename[40];
    unsigned char slots[16384/8];
} clusterMsgDataUpdate;

typedef struct {
    uint64_t module_id;
    uint32_t len;
    uint8_t type;
    unsigned char bulk_data[3];
} clusterMsgModule;

union clusterMsgData {

    struct {

        clusterMsgDataGossip gossip[1];
    } ping;


    struct {
        clusterMsgDataFail about;
    } fail;


    struct {
        clusterMsgDataPublish msg;
    } publish;


    struct {
        clusterMsgDataUpdate nodecfg;
    } update;


    struct {
        clusterMsgModule msg;
    } module;
};



typedef struct {
    char sig[4];
    uint32_t totlen;
    uint16_t ver;
    uint16_t port;
    uint16_t type;
    uint16_t count;
    uint64_t currentEpoch;
    uint64_t configEpoch;


    uint64_t offset;

    char sender[40];
    unsigned char myslots[16384/8];
    char slaveof[40];
    char myip[NET_IP_STR_LEN];
    char notused1[34];
    uint16_t cport;
    uint16_t flags;
    unsigned char state;
    unsigned char mflags[3];
    union clusterMsgData data;
} clusterMsg;
# 286 "/Users/happy/Documents/Dataset/redis/src/cluster.h"
clusterNode *getNodeByQuery(client *c, struct redisCommand *cmd, robj **argv, int argc, int *hashslot, int *ask);
int clusterRedirectBlockedClientIfNeeded(client *c);
void clusterRedirectClient(client *c, clusterNode *n, int hashslot, int error_code);
unsigned long getClusterConnectionsCount(void);
